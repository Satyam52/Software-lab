let petString= " James has a pet cat .
let petRegex =/dog|cat|bird|fish/ ;
let result =petRegex.test ( petString ) ;
              
Case ignoring -> '/freecodecamp/i'
Gloabal search -> '/freecodecamp/ig'
Wildcard -> '/hu./' = hum, hug, hus
Negation -> /[^0-9aeiou]/ig 
Occurance 1 or more => /s+/g 
Occurance 0 or more => /go*/g -> goal, goooooooo, goooooooooooo, g
First and last -> ^, $

let string = "titanic" ;
let regex = /t[a-z]*?i/; -> lazy match
let regex2 = /t[a-z]*i/; -> greedy match
string.match ( regex ) ;
let text = "<h1>Winter is coming</h1>" ;
let myRegex = /<.*?>/ ;
let result = text.match ( myRegex ) ;
console.log ( result ) ;
               
/\w/g -> a-z, A-Z, 0-9,_
/\W/g ->  ^(a-z, A-Z, 0-9,_)
\d -> match all number
\D -> match non number
\s -> Match whitespace
\S -> match non whitespace
? -> maybe the letter is present or absent


let quit " qu " ;
let noquit " qt " ;
let quRegex = / q ( ? = u ) / ;
let qRegex = / q ( ? ! u ) / ;
quit.match ( quRegex ) ; // Returns [ " q " ]
noquit.match ( qRegex ) ; // Returns [ " q " ]
let pwRegex / ( ? = \ w { 5 } ) ( ? = \ D * \ d { 2 } ) / ;  -> password is 5 char long and have atleast two digits

let repeatStr " regex regex " ;
let repeatRegex / ( \ w + ) \ s \ 1 / ;
repeatRegex.test ( repeatStr ) ; // Returns true
repeatStr.match ( repeatRegex ) ; // Returns [ " regex regex","regex"]  
let repeatNum = " 42 42 42 " ;
let reRegex = / ^ ( \ d + ) \ s \ 1 \ s \ 1 $ / ; // Change this line
let result = reRegex.test ( repeatNum ) ; â–º